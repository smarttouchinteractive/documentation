[[{"l":"Welcome","p":["Welcome to the SmartTouch InteractiveÂ® documentation, please use the left side navigation to browse available help documents."]}],[{"l":"Customizing","p":["When using NexGEN CRM forms, you are provided with two snippets of code to get started; the global code snippet and the individual form code snippet"]},{"l":"Global Form Snippet","p":["The global form snippet should be pasted within the head of your websites html, and should be included on all pages on the website. This code only needs to be included once regardless of how many form codes you install.","###### is a numeric id assigned to your account and is shown in the form builder snippet. Not all accounts will have the visistat script included."]},{"l":"Individual Form Code Tag","p":["#### is a numeric id for the form and client parameters, and is shown in the form builder snippet."]},{"l":"Customizing Form Code Tag","p":["The form code tag includes optional parameters which you can use to change the layout of the form displayed on your website."]},{"l":"Change width of individual fields","p":["Forms are generated in a grid layout with 12 columns. By default, the width of each field is 12 columns wide. To specify an alternative width for each field, you can use the span# parameter, where # is the number of columns a field should occupy. Using the spanmobile# parameter, you can specify an alternative column width for mobile. The value is a comma separated list of field IDs. In the example below, we will take the fields First Name (1), Last Name (2), Email (7), and Phone Number (4) and have them occupy 6 columns on desktop, and 12 columns on mobile."]},{"l":"Use placeholders instead of Labels","p":["Adding the placeholders parameter will display the form fields using placeholders instead of labels. Keep in mind, that some fields will still have labels in place of placeholders (date & time fields)."]},{"l":"Change the label of the submit button","p":["The submit parameter can be set to a text value which will replace the form's submit button label."]},{"l":"Add a disclaimer to the form","p":["The disclaimer parameter allows you to set a disclaimer which will appear next to the submit button."]},{"l":"Callback Functions","p":["The onsubmit, onsuccess, onfail, onchange, onload parameters can be set to a function name will be called whenever the trigger has occured. The function includes the form DOM element as the passed function parameter, with the exception of the onchange callback, which also passes the field element that has changed."]},{"l":"GA4 Event Tracking via Google Tag Manager","p":["If GTM is detected, the form will automatically send a GTM event (via DataLayer), which can be used in GTM for tracking a form submission. There are 4 parameters that can be set to add additional tracking parameters to the datalayer object. builder, community, floorplan, and spec. The label paramater can be used to customize the event label. The location parameter can be used to customize the location of the form."]}],[{"l":"Styling","p":["The style of the form can be customized in CSS via CSS3 variables (recommended) or directly customizing the selector itself."]},{"l":"Individual CSS Variables"},{"l":"Combined CSS Variables","p":["These variables can be used if you prefer to use combined CSS variable rather than the individual CSS variables above. The defaults use the individual variables above to create a combined variable, so it is recommended to use the individual variables unless you need more control of the values."]}],[{"l":"Conditions","p":["The conditions attribute can be used to modify how certain fields display in relation to other fields values.. for example, if a dropdown has one value show one set of fields and if another show another set of fields. This can be a single formula, or multiple formulas separated by a pipe character (\"|\")."]},{"l":"Formula","p":["CONDITION+ \"?\" + THEN+ \":\" + ELSE","12023=1002?12024=show:12024=hide","CONDITION: The test to perform. If it returns true, then THEN will be performed, otherwise (optional) ELSE will be performed. In the example, if field id 12023 equals value 1002, then return true. In the case of select or checkbox fields, you can specify multiple values by comma separating them. The condition will return true if any of the values are selected (example: 12023=1002,1003,1005). The equals sign is the only operator allowed.","THEN & ELSE: The action to take if true, or the the action to take if false. This formula consists of what to take action on (field id or field ids) followed by the equals sign then action to take or actions to take ( IDS= ACTIONS). IDS is a comma separated list of field IDs to take action on. ACTIONS is a comma separated list of actions to take. Predefined actions are show, hide, required, optional, and clear. If a predefined action is not used, it will instead set the value.","ACTIONS: show: Show the field (12024=show) hide: Hide the field (12024=hide) required: Make the field required (12024=required) optional: Make the field optional (12024=optional) clear: Clear the fields value (12024=clear)(anything else): Set the field value (12024=Hello)","ELSE: Optional. If no operator is used, the formula will assume the actions should be taken on the same IDS in the THEN part of the formula."]},{"l":"Advanced Example","p":["If field 10279 equals 17940, then make fields 3 and 10289 visible and required, otherwise make fields 3 and 10289 hidden and optional. Also, if field 10279 equals 17938, 17939, or 17941, then make fields 10290, 10291, 10288, 10292, and 10293 visible, otherwise make fields 10290, 10291, 10288, 10292, 10293 hidden."]}]]